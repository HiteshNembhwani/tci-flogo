import { IFlowDiagram } from "../../../common/models/diagram/diagram.model";
import { IFlowDiagramNode, IFlowDiagramRootNode } from "../../../common/models/diagram/node.model";
import { IFlowDiagramTask } from "../../../common/models/app/task.model";
import { IFlowDiagramNodeDictionary, IFlowDiagramTaskDictionary } from "../../../common/models/diagram/dictionary.model";
import { FLOW_DIAGRAM_NODE_TYPE } from "../../../common/constants";
export declare const CLS: {
    diagram: string;
    diagramRow: string;
    diagramRowStatusSelected: string;
    diagramNode: string;
    diagramNodeBranchHover: string;
    diagramNodeStatusSelected: string;
    diagramNodeStatusRun: string;
    diagramNodeStatusHasError: string;
    diagramNodeStatusHasWarn: string;
    diagramNodeDetail: string;
    diagramNodeDetailBranch: string;
    diagramNodeDetailBranchSelected: string;
    diagramNodeDetailBranchHover: string;
    diagramNodeDetailBranchRun: string;
    diagramNodeDetailIcon: string;
    diagramNodeDetailTitle: string;
    diagramNodeDetailTitleHelper: string;
    diagramNodeDetailDesc: string;
    diagramNodeBadge: string;
    diagramNodeMenu: string;
    diagramNodeMenuBox: string;
    diagramNodeMenuList: string;
    diagramNodeMenuGear: string;
    diagramDraggablePoint: string;
    diagramNodeHasValue: string;
    diagramStatusIcon: string;
    diagramIcError: string;
    diagramStatusIconHidden: string;
    wistudioRow: string;
    wistudioTileError: string;
    wistudioTileNodeError: string;
    wistudioRowLastTile: string;
    wistudioTileRowHover: string;
    wistudioAddTileDroppable: string;
};
export declare const DATA_ATTR: {
    dataTaskId: string;
    dataNodeId: string;
    dataMenuItemType: string;
    dataFlogoNodeType: string;
};
export declare class FlowDiagram implements IFlowDiagram {
    private diagram;
    private tasks;
    private elm;
    private diagramType;
    private serviceErrors;
    root: IFlowDiagramRootNode;
    nodes: IFlowDiagramNodeDictionary;
    maxRowLenght: number;
    private rootElm;
    private ng2StyleAttr;
    private matrix;
    nodesOfAddType: IFlowDiagramNodeDictionary;
    constructor(diagram: IFlowDiagram, tasks: IFlowDiagramTaskDictionary, elm?: HTMLElement, diagramType?: string, serviceErrors?: {
        tasks: {};
        nodes: {};
    });
    setDiagramType(type: string): void;
    static isBranchNode(node: IFlowDiagramNode): boolean;
    static hasBranchRun(node: IFlowDiagramNode, tasks: IFlowDiagramTaskDictionary, nodes: IFlowDiagramNodeDictionary): boolean;
    static transformDiagram(diagram: IFlowDiagram): string[][];
    static padMatrix(matrix: string[][], rowLen: number, diagram: IFlowDiagram): string[][];
    static getEmptyDiagram(diagramType?: string): IFlowDiagram;
    static filterOverflowAddNode(matrix: string[][], nodes: IFlowDiagramNodeDictionary, rowLen?: number): string[][];
    private calculateMaxCountTiles(diagram);
    update(opt: {
        diagram?: IFlowDiagram;
        tasks?: IFlowDiagramTaskDictionary;
        element?: HTMLElement;
    }): Promise<FlowDiagram>;
    updateAndRender(opt: {
        diagram?: IFlowDiagram;
        tasks?: IFlowDiagramTaskDictionary;
        element?: HTMLElement;
    }): Promise<FlowDiagram>;
    updateDiagram(diagram: IFlowDiagram): Promise<FlowDiagram>;
    updateTasks(tasks: IFlowDiagramTaskDictionary): Promise<FlowDiagram>;
    updateElement(elm: HTMLElement): Promise<FlowDiagram>;
    exitNodes(): void;
    private _bindDataToRows(rows);
    private _handleEnterRows(rows);
    private _handleUpdateRows(rows);
    private _handleExitRows(rows);
    private _bindDataToNodes(rows);
    private _handleEnterNodes(nodes, rows);
    private rowHoverArtifactsShow(element);
    private rowHoverArtifactsHide(element);
    private _handleUpdateNodes(nodes, rows);
    private _handleExitNodes(nodes, rows);
    private _handleTaskNodes(tasks, rows);
    private _bindDataToNodeDetails(rows);
    private _handleEnterNodeDetails(nodeDetails, rows);
    private _handleUpdateNodeDetails(nodeDetails, rows);
    private _handleExitNodeDetails(nodeDetails, rows);
    private _handleNodeDetails(nodeDetails, rows);
    private _bindDataToNodeMenus(nodeMenus);
    private _handleEnterNodeMenus(nodeMenus);
    private _handleUpdateNodeMenus(nodeMenus);
    private _handleExitNodeMenus(nodeMenus);
    private _handleNodeMenus(nodeMenus);
    private _bindDataToNodeBadges(nodeBadges);
    private _handleEnterNodeBadges(nodeBadges);
    private _handleUpdateNodeBadges(nodeBadges);
    private _handleExitNodeBadges(nodeBadges);
    private _handleNodeBadges(nodeBadges);
    render(): Promise<FlowDiagram>;
    triggerByTaskID(eventName: string, taskID: string): Promise<FlowDiagram>;
    linkNodeWithTask(nodeID: string, task: IFlowDiagramTask): Promise<FlowDiagram>;
    findNodesByType(type: FLOW_DIAGRAM_NODE_TYPE, sourceNodes?: IFlowDiagramNode[]): IFlowDiagramNode[];
    findNodesByIDs(ids: string[]): IFlowDiagramNode[];
    findChildrenNodesByType(type: FLOW_DIAGRAM_NODE_TYPE, node: IFlowDiagramNode): IFlowDiagramNode[];
    findParentsNodesByType(type: FLOW_DIAGRAM_NODE_TYPE, node: IFlowDiagramNode): IFlowDiagramNode[];
    deleteNode(node: IFlowDiagramNode): Promise<any>;
    private _updateNG2StyleAttr();
}
