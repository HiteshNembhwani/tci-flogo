"use strict";var __extends=this&&this.__extends||function(){var e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var o in t)t.hasOwnProperty(o)&&(e[o]=t[o])};return function(t,o){function n(){this.constructor=t}e(t,o),t.prototype=null===o?Object.create(o):(n.prototype=o.prototype,new n)}}(),__decorate=this&&this.__decorate||function(e,t,o,n){var r,i=arguments.length,s=i<3?t:null===n?n=Object.getOwnPropertyDescriptor(t,o):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,o,n);else for(var l=e.length-1;l>=0;l--)(r=e[l])&&(s=(i<3?r(s):i>3?r(t,o,s):r(t,o))||s);return i>3&&s&&Object.defineProperty(t,o,s),s},__metadata=this&&this.__metadata||function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)};Object.defineProperty(exports,"__esModule",{value:!0});var core_1=require("@angular/core"),fields_base_component_1=require("../fields.base/fields.base.component"),constants_1=require("../../../../../../common/constants"),ng2_translate_1=require("ng2-translate"),EMPTY_OPTION="<empty>",ConnectionsFormBuilderFieldsListBox=function(e){function t(t){var o=e.call(this,t)||this;return o.translate=t,o.options=[],o}return __extends(t,e),t.prototype.ngOnInit=function(){this.options=[EMPTY_OPTION].concat(this._info.allowed)},t.prototype.onChangeField=function(e){e===EMPTY_OPTION&&(e=constants_1.DEFAULT_VALUES_OF_TYPES[this._info.type]),this._info.value=e,this.publishNextChange()},t}(fields_base_component_1.ConnectionsFormBuilderFieldsBase);ConnectionsFormBuilderFieldsListBox=__decorate([core_1.Component({selector:"connections-form-builder-fields-listbox",styleUrls:["fields.listbox.css","../fields.base/fields.base.css"],moduleId:module.id,template:'<div class="flogo-field-listbox">\n\n              <div class="flogo-fields-header-field">\n                  <label class="control-label">{{_info.title}}</label>\n                  <label class="control-label" [hidden]="_info.required || _info.direction == \'output\' "> Optional </label>\n              </div>\n          \n              <select\n                  class="form-control tc-inputs"\n                  [class.error]="_hasError"\n                  [(ngModel)]="_info.value"\n                  (focus)="onFocus($event)"\n                  (change)="onChangeField(_info.value); onValidate($event)"\n                  (blur)="onBlur($event)">\n                <option [ngValue]="option" *ngFor="let option of options">\n                  {{option ? option : "&nbsp;"}}\n                </option>\n              </select>\n              <div *ngIf="_hasError && _errorMessage" class="control-group error">\n                <label class="flogo-fields-base__error">{{_errorMessage}}</label>\n              </div>\n            </div>\n  ',inputs:["_info:info","_fieldObserver:fieldObserver"]}),__metadata("design:paramtypes",[ng2_translate_1.TranslateService])],ConnectionsFormBuilderFieldsListBox),exports.ConnectionsFormBuilderFieldsListBox=ConnectionsFormBuilderFieldsListBox;