import { DomSanitizer } from "@angular/platform-browser";
import { ContribService } from "../contrib/wi-contrib.service";
import { PaletteService } from "../shared/services/palette.service";
import { AppModel } from "../../common/models/app/app.model";
import { FlowService } from "../shared/services/flowService";
import { AfterViewInit } from "@angular/core";
import { Router, ActivatedRoute } from "@angular/router";
import { ModalDirective } from "ng2-bootstrap";
import { ConnectionsService } from "../shared/services/connectionsService";
export declare class CreateFlowComponent implements AfterViewInit {
    private _router;
    private _activatedRoute;
    private connectionService;
    private flowService;
    private paletteService;
    private contribService;
    private sanitizer;
    private appService;
    connectionsModal: ModalDirective;
    flowModal: ModalDirective;
    sfTriggerModal: ModalDirective;
    starters: any[];
    appId: string;
    sandboxId: string;
    connections: any;
    app: AppModel;
    name: string;
    description: string;
    selected: string;
    _errorMessage: string;
    _hasError: boolean;
    _isSchemaError: boolean;
    _isPathError: boolean;
    flowNames: string[];
    SUPPORTED_REST_VERBS: string[];
    next: boolean;
    path: string;
    selectedMethods: string[];
    valid: boolean;
    settings: any[];
    _value: string;
    className: string;
    colorByConnectionType: string;
    connectionDisplayString: string;
    businessObjects: Array<any>;
    businessObjectsExist: boolean;
    sfTriggerSchemaURL: string;
    selectedTrigger: string;
    connectionName: string;
    connectionId: string;
    errorMessage: string;
    flowNameError: string;
    flowName: string;
    contributions: any[];
    constructor(_router: Router, _activatedRoute: ActivatedRoute, connectionService: ConnectionsService, flowService: FlowService, paletteService: PaletteService, contribService: ContribService, sanitizer: DomSanitizer, appService: any);
    moveNext(): void;
    isDisabled(): boolean;
    save(): void;
    getUniqueName(name: any, i: any): string;
    createFlow(item: any, index?: number): void;
    addReplyActivity(flowId: string, nodeId: string): void;
    cancel(): void;
    ngAfterViewInit(): void;
    triggerSelected(choice: any): boolean;
    connectionCancel(): void;
    triggerCancel(): void;
    connectionSelected(connectionId: any, connectionCategory: any, connectionName: any): void;
    onChange(name: string): void;
    onPathChange(path: string): void;
    toggleMethodSelection(verb: string): void;
    getClassName(verb: string): "" | "method-active";
    doValidation(): void;
    pathValidation(existingPath: any, newPath: any): boolean;
    onValidate($event: any): void;
    getClassNameByConnectionType(connectionType: any): string;
    triggerContribution(): void;
    verifyPathStartSlash(path: string): boolean;
    createFlowforConnectionTrigger(): void;
    setsfTriggerValue(event: any): void;
    private validateSchema(value);
}
