import { EventEmitter, OnInit, OnDestroy } from "@angular/core";
import { IMapperContext, IMapping } from "../../common/models/mapper/map-model";
import "rxjs/add/operator/auditTime";
import "rxjs/add/operator/catch";
import "rxjs/add/operator/debounceTime";
import "rxjs/add/operator/distinctUntilChanged";
import "rxjs/add/operator/do";
import "rxjs/add/operator/map";
import "rxjs/add/operator/share";
import "rxjs/add/operator/takeUntil";
import "rxjs/add/operator/withLatestFrom";
import { MapperService, CurrentSelection } from "./mapper.service";
import { EditorService } from "./editor/editor.service";
import { DraggingService } from "./tree/dragging.service";
export declare class MapperComponent implements OnInit, OnDestroy {
    private mapperService;
    private editorService;
    private draggingService;
    context: IMapperContext;
    mappingsChange: EventEmitter<IMapping>;
    currentInput: CurrentSelection;
    isDraggingOver: boolean;
    private dragOverEditor;
    private ngDestroy;
    constructor(mapperService: MapperService, editorService: EditorService, draggingService: DraggingService);
    ngOnInit(): void;
    ngOnDestroy(): void;
    onDrop(event: DragEvent): void;
    onDragOver(event: DragEvent): void;
    onOutputSelected(node: any): void;
    onDragEnter(event: DragEvent): void;
    onDragLeave(event?: DragEvent): void;
    onClickOutside(): void;
    private isDragAcceptable();
}
