"use strict";var __decorate=this&&this.__decorate||function(e,t,o,n){var l,a=arguments.length,i=a<3?t:null===n?n=Object.getOwnPropertyDescriptor(t,o):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)i=Reflect.decorate(e,t,o,n);else for(var r=e.length-1;r>=0;r--)(l=e[r])&&(i=(a<3?l(i):a>3?l(t,o,i):l(t,o))||i);return a>3&&i&&Object.defineProperty(t,o,i),i},__metadata=this&&this.__metadata||function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)};Object.defineProperty(exports,"__esModule",{value:!0});var core_1=require("@angular/core"),forms_1=require("@angular/forms"),field_model_1=require("./field-models/field.model"),constants_1=require("../../common/constants"),FormPlacerComponent=function(){function e(){this.category=null,this.fieldValueChanged=new core_1.EventEmitter,this.componentReady=!1,this.schema={}}return e.prototype.ngOnInit=function(){this.schemaHandle()},e.prototype.ngAfterViewInit=function(){this.componentReady=!0,constants_1.FLOW_DIAGRAM_DEBUG,constants_1.FLOW_DIAGRAM_DEBUG,constants_1.FLOW_DIAGRAM_DEBUG,constants_1.FLOW_DIAGRAM_DEBUG,constants_1.FLOW_DIAGRAM_DEBUG,constants_1.FLOW_DIAGRAM_DEBUG},e.prototype.modelChanged=function(e){if(this.componentReady){this.field,this.category;this.fieldValueChanged.emit(this.field)}},e.prototype.setValue=function(e){this.field.value=e,this.form.controls[this.field.name].setValue(e),this.modelChanged(e)},e.prototype.schemaHandle=function(){"FieldSchema"===this.field.controlType&&(this.schema=this.field.value.replace(/\\/g,""))},e}();__decorate([core_1.Input(),__metadata("design:type",Object)],FormPlacerComponent.prototype,"category",void 0),__decorate([core_1.Input(),__metadata("design:type",forms_1.FormGroup)],FormPlacerComponent.prototype,"form",void 0),__decorate([core_1.Input(),__metadata("design:type",field_model_1.FieldModel)],FormPlacerComponent.prototype,"field",void 0),__decorate([core_1.Output(),__metadata("design:type",core_1.EventEmitter)],FormPlacerComponent.prototype,"fieldValueChanged",void 0),FormPlacerComponent=__decorate([core_1.Component({selector:"app-form-placer",moduleId:module.id,template:'\n    <div [formGroup]="form" class="form-group">\n      <label class="field-label" [attr.for]="field.name">{{field.displayName}}</label>\n\n      <div [ngSwitch]="field.controlType">\n        \x3c!--<div class="text-warning">\n          HasErrors: {{field.hasErrors}} <br>\n          ErrorMsg: {{field.errorMsgs | json}} <br>\n\n          <b class="text-default">Schema is valid:\n            <span [ngClass]="{\'text-success\': field.valid, \'text-danger\': !field.valid}">{{field.valid}}</span></b> <br>\n          <b class="text-default">Form element is valid:\n            <span [ngClass]="{\'text-success\': form.controls[this.field.name].valid, \'text-danger\': !form.controls[this.field.name].valid}">{{form.controls[this.field.name].valid}}</span></b> <br>\n          \n          controlType: {{field.controlType}} <br>\n        </div>--\x3e\n\n        <input class="form-control" [id]="field.name" *ngSwitchCase="\'FieldTextBox\'" [formControlName]="field.name"\n          [type]="field.type" [readonly]="field.readonly" [(ngModel)]="field.value" (ngModelChange)="modelChanged($event)">\n\n        <select class="form-control" [id]="field.name" *ngSwitchCase="\'FieldListBox\'" [formControlName]="field.name"\n          [(ngModel)]="field.value" (ngModelChange)="modelChanged($event)">\n          <option *ngFor="let opt of field.options" [value]="opt.key">{{opt.value}}</option>\n        </select>\n\n        <input-radio *ngSwitchCase="\'FieldRadio\'" [field]="field" [form]="form" (valueChanged)="modelChanged($event)"></input-radio>\n        \n        <input-field *ngSwitchCase="\'FieldFile\'" [field]="field" (valueChanged)="modelChanged($event)"></input-field>\n\n        <ace-editor class="form-control" [id]="field.name" *ngSwitchCase="\'FieldSchema\'" [(text)]="schema" (textChanged)="setValue($event)"></ace-editor>\n        \n        <form-field-grid *ngSwitchCase="\'FieldGrid\'" [field]="field" (valueChanged)="setValue($event)"></form-field-grid>\n      </div> \n      <div class="errorMessage text-danger" *ngIf="!field.valid && field.errorMsgs">{{field.errorMsgs[0]}}</div>\n    </div>\n  ',styleUrls:["styles/forms.css"]})],FormPlacerComponent),exports.FormPlacerComponent=FormPlacerComponent;