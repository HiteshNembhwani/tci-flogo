import { AfterViewInit, OnInit, ElementRef, EventEmitter, OnDestroy } from "@angular/core";
import { MonacoLoaderService } from "./monaco-loader.service";
import { EditorOptions, ICursorPositionChangedEvent, ICursorSelectionChangedEvent, IStandaloneCodeEditor, LineRange } from "./monaco.types";
import { ClientPosition, CompletionProvider, EditorError, HoverProvider, OffsetRange } from "./types";
export declare const DEFAULT_EDITOR_OPTIONS: {
    language: string;
    wordSeparators: string;
    fixedOverflowWidgets: boolean;
};
export declare class MonacoEditorComponent implements AfterViewInit, OnInit, OnDestroy {
    private _monacoLoader;
    editorRef: ElementRef;
    editorOptions: EditorOptions;
    hoverProvider: HoverProvider;
    completionProvider: CompletionProvider;
    valueChange: EventEmitter<string>;
    cursorChange: EventEmitter<ICursorPositionChangedEvent>;
    selectionChange: EventEmitter<ICursorSelectionChangedEvent>;
    editor: IStandaloneCodeEditor;
    private _disposed;
    private _value;
    private _internalHoverProvider;
    private _disposables;
    isEditorLoading: boolean;
    constructor(_monacoLoader: MonacoLoaderService);
    ngOnInit(): void;
    value: string;
    insert(text: string, range?: OffsetRange | LineRange): void;
    insertAtClientPosition(text: string, clientPosition: ClientPosition): void;
    replaceTokenAtClientPosition(text: string, clientPosition: ClientPosition): void;
    selectTokenAtClientPosition(clientPosition: ClientPosition): void;
    setCursorAtClientPosition(clientPosition: ClientPosition): void;
    changeModel(value: string, mode?: string): void;
    setErrors(errors?: EditorError[]): void;
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
    onWindowResize(event: MouseEvent): void;
    updateDimensions(dimension?: {
        width: number;
        height: number;
    }): void;
    private initMonaco();
    private onDidChangeContent();
    private onDidChangeCursorPosition(event);
    private onDidChangeCursorSelection(event);
    private registerHoverProvider();
    private registerCompletionProvider();
    private createMonacoRangeInstance(range);
    private errorToMarker(e);
    private determineRangeToInsertTo();
    private getLanguageId();
    private insertText(text, range);
    private getRangeForTokenAtClientPosition(clientPosition);
    private getGrammar();
}
