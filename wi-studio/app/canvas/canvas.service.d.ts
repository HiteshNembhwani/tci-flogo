import { TCIServices } from "./../shared/services/TCIServices";
import "rxjs/add/observable/of";
import "rxjs/add/operator/map";
import "rxjs/add/operator/catch";
import { Flow } from "../../common/models/app/flows";
import { IFlowDiagramTask } from "../../common/models/app/task.model";
import { IMapping } from "../../common/models/mapper/map-model";
import { AppModel } from "../../common/models/app/app.model";
import { FlowService } from "../shared/services/flowService";
import { FlowDiagram } from "../diagram/models/diagram.model";
import { AppMessaging } from "../../common/services/messaging";
export declare class CanvasService {
    private _flowService;
    private tciService;
    _msg: AppMessaging;
    private appModel;
    private currentFlow;
    private selectedTask;
    taskEventHelper: any;
    private diagramFlow;
    private activityControl;
    private mainFlowId;
    private AUTO_SAVE_TIME;
    constructor(_flowService: FlowService, tciService: TCIServices);
    getAutoSaveConfig(): number;
    updateItemToAppModel(flowId: string, item: any): void;
    setAppModel(app: AppModel): void;
    getAppModel(): AppModel;
    setCurrentFlow(flow: Flow, type?: string): void;
    getCurrentFlow(): Flow;
    getNode(taskId: string): any;
    getTask(taskId: string): any;
    updateMappings(taskId: string, mappings: IMapping): void;
    setSelectedTask(task: IFlowDiagramTask): void;
    getSelectedTask(): IFlowDiagramTask;
    setDiagramFlow(diagram: FlowDiagram): void;
    getDiagramFlow(): FlowDiagram;
    setMainFlowId(mainFlowId: string): void;
    getMainFlowId(): string;
    setupActivitiesFlowsControl(): void;
    setupActivityDetailTitle(_task: IFlowDiagramTask, _flowId: string): string;
    setupActivitiesFlowControl(_flowId: string): void;
    getActivityTitle(_task: IFlowDiagramTask, _flowId: string): string;
    existActivityTitle(_title: string, _flowId: string): boolean;
    removeActivityTitleControl(_taskId: string, _flowId: string): void;
    setupUpdatedFlowActivityTitle(_flowId: string, _task: IFlowDiagramTask): void;
    saveApp(isTabChange?: boolean): void;
    private setupFlowActivitiesTitle(_flow);
    private crossFlowsActivitiesTitlesCounters(_flowId);
    private setupActivityTitleClearControl(_task, _flowId);
    private setActivityTitle(_task, _flowId);
    private getControlActivityTitle(_task, _flowId);
    private getTitleClear(_title);
    private setupActivityTitleCounter(_flowId, activityTitle, isNew);
    private getGlobalActivityTitleCounter(_activityTitleClear);
    private getTitleByActivityExistance(_title, _task, _flowId);
    private getActivityTitleByRange(_titleClear, _flowId, _minCounter, _maxCounter);
}
