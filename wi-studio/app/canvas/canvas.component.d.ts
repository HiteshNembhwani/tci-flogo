import { ValidationService } from "./../shared/services/validation/validation.service";
import { ContribService } from "../contrib/wi-contrib.service";
import { NotificationsService } from "angular2-notifications";
import { AppModel } from "../../common/models/app/app.model";
import { FlowService } from "./../shared/services/flowService";
import { EventEmitter } from "@angular/core";
import { Router, ActivatedRoute } from "@angular/router";
import { Http } from "@angular/http";
import { Flow } from "../../common/models/app/flows";
import { IFlowDiagramTask } from "../../common/models/app/task.model";
import { Location } from "@angular/common";
import { CanvasService } from "./canvas.service";
import { TCIServices } from "./../shared/services/TCIServices";
import { ContextInputSchemaProvider } from "./../mapper/service/map.input.schema.provider";
import { MappingParser } from "./../mapper/service/map.parser";
import { MapContextValidator } from "./../mapper/service/map.context.validator";
import { FunctionsLookup } from "./../mapper/service/map.function.lookup";
import { ScopedOutputSchemaProvider } from "./../mapper/service/map.output.schema.provider";
import { IMapperContext } from "./../../common/models/mapper/map-model";
import { FlowsListService } from "../flowslist/flowsList.service";
import { PaletteService } from "../shared/services/palette.service";
export declare const TEMPL: {
    IDS: {
        diagramContainer: string;
        diagramHandlerSwitch: string;
        flowContainer: string;
        paletteContainer: string;
        propertyPaletteContainer: string;
        paletteContainerArrow: string;
    };
    CLS: {
        propertyPalettePlacer: string;
    };
};
export declare class CanvasComponent {
    private _service;
    private _router;
    private http;
    private route;
    private flowService;
    private flowListService;
    private _notifService;
    private _tciServices;
    private location;
    private paletteService;
    private contribService;
    private validationService;
    private outputSchema;
    private functionsLookup;
    private contextValidator;
    private inputSchema;
    private mappingpparser;
    pushed: EventEmitter<{}>;
    private TEMPL;
    options: {
        position: string[];
        timeOut: number;
        lastOnBottom: boolean;
        maxStack: number;
        preventDuplicates: boolean;
        theClass: string;
    };
    private currentDiagramHandler;
    flow: Flow;
    flowId: string;
    flowIds: string[];
    flows: any;
    sandboxId: string;
    app: AppModel;
    originalApp: AppModel;
    propertyPaletteCollapsed: boolean;
    showTaskPropertiesPending: boolean;
    showTaskPropertiesPendingId: string;
    taskToDeleteId: string;
    taskToDeleteChildCount: number;
    taskToDeleteLabel: string;
    taskToDeleteAnimated: boolean;
    displayDeleteTaskModal: boolean;
    displayBranchMappingModal: boolean;
    mappingBranch: IFlowDiagramTask;
    mapperContext: IMapperContext;
    constructor(_service: CanvasService, _router: Router, http: Http, route: ActivatedRoute, flowService: FlowService, flowListService: FlowsListService, _notifService: NotificationsService, _tciServices: TCIServices, location: Location, paletteService: PaletteService, contribService: ContribService, validationService: ValidationService, outputSchema: ScopedOutputSchemaProvider, functionsLookup: FunctionsLookup, contextValidator: MapContextValidator, inputSchema: ContextInputSchemaProvider, mappingpparser: MappingParser);
    private initSubscriptions();
    private triggerValidations();
    private getFlow(appId);
    private setCurrentMainFlow();
    private addTask($event);
    private selectTask($event);
    private openBranchMappingsModal(taskID);
    private selectedTaskExecute(taskID);
    private cleanRoute();
    private onMenuItemClicked($event);
    private openFlow(id);
    private goToAppDetails();
    private showSelectedTaskProperties();
    private doPropertyPaletteShow(taskID);
    doPropertyPaletteCollapse(): void;
    doPropertyPaletteExpand(taskID?: string): void;
    unSelectTask(): void;
    private elementSelectedPropertyPaletteArrow(taskID?, showTask?);
    private deleteTaskAnalysis(taskId);
    private deleteTaskCancel();
    private deleteTaskProceed();
    private changeFlowDetail($event, field);
    private pushApp();
    private diagramTransactionsErroHandler(e);
    private diagramLaunchTCI(data);
    private revertApp();
    private getAppData(revert?);
    private getTaskElement(taskID);
    private currentDiagramHandlerSwitch();
    private currentDiagramHandlerSet(main?, errorHandlerId?);
    private errorHandlerTriggerCreate();
    private getFlowDiagramHandlerDataMain();
    private getFlowDiagramHandlerDataError(errorHandlerId);
    private onMappingsChange($event);
    private branchMappingModalClose();
    private brancMappingEvaluate();
}
