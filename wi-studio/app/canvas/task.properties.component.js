"use strict";var __decorate=this&&this.__decorate||function(t,e,s,a){var i,n=arguments.length,o=n<3?e:null===a?a=Object.getOwnPropertyDescriptor(e,s):a;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(t,e,s,a);else for(var r=t.length-1;r>=0;r--)(i=t[r])&&(o=(n<3?i(o):n>3?i(e,s,o):i(e,s))||o);return n>3&&o&&Object.defineProperty(e,s,o),o},__metadata=this&&this.__metadata||function(t,e){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(t,e)};Object.defineProperty(exports,"__esModule",{value:!0});var core_1=require("@angular/core"),router_1=require("@angular/router"),constants_1=require("../../common/constants"),canvas_service_1=require("../canvas/canvas.service"),task_model_1=require("../../common/models/app/task.model"),TaskPropertiesComponent=function(){function t(t,e){this.canvasService=t,this.route=e,this.subscriptionsDone=!1,this.isAlive=!0,this.taskTitleHasError=!1}return t.prototype.ngOnInit=function(){var t=this;this.route.params.subscribe(function(e){e.taskID&&(t.canvasService._msg.emit(constants_1.APP_MESSAGING_VALUES.OPEN_TASK_PROPERTIES,e.taskID),t.app&&t.flow&&t.setTask(t.flow.items[e.taskID]))})},t.prototype.ngAfterViewInit=function(){var t=this;this.task=this.canvasService.getSelectedTask(),this.subscriptionsDone||(this.task&&(this.flow=this.canvasService.getCurrentFlow(),this.setTask(this.task),this.setTaskUtils(),this.setAppData()),this.canvasService._msg.on(constants_1.APP_MESSAGING_VALUES.FLOW_CHANGED,function(){t.isAlive&&(t.flow=t.canvasService.getCurrentFlow(),t.canvasService.setupActivitiesFlowsControl())}),this.canvasService._msg.on(constants_1.APP_MESSAGING_VALUES.TASK_SELECTED,function(e){t.isAlive&&e&&(t.setAppData(),t.setTask(e))}),this.subscriptionsDone=!0)},t.prototype.ngOnDestroy=function(){this.isAlive=!1},t.prototype.setTaskUtils=function(){this.taskTitleHasError=!1,this.taskTitleErrorMsg="",this.canvasService.setupActivitiesFlowControl(this.flow._id),this.taskTitle=this.canvasService.setupActivityDetailTitle(this.task,this.flow._id)},t.prototype.setTask=function(t){if("FlowDiagramTask"!==t.constructor.name){var e=new task_model_1.FlowDiagramTask(this.flow.items[t.id]);this.flow.items[t.id]=e,this.task=e}else this.task=t;this.setTaskUtils()},t.prototype.setAppData=function(){this.app=this.canvasService.getAppModel(),this.flow=this.canvasService.getCurrentFlow()},t.prototype.taskFieldValueChanged=function(t){this.canvasService.saveApp()},t}();TaskPropertiesComponent=__decorate([core_1.Component({selector:"task-properties",moduleId:module.id,template:'\n    <div class="ta-container" *ngIf="task">\n      <div class="ta-title">\n        <div>\n          <span class="ta-title-text pull-left" [(myContenteditable)]="taskTitle" \n          [(myContentApplyOnChangeAlways)]="applyOnChangeAlways" (myContenteditableChange)="changeTaskTitle($event, \'title\')">{{taskTitle}}</span>\n        </div>\n\n        <div *ngIf="taskTitleHasError && taskTitleErrorMsg" class="control-group error">\n          <label class="flogo-fields-base__error">{{taskTitleErrorMsg}}</label>\n        </div>\n\n        <div class="clearfix"></div>\n      </div>\n\n      <ng-container *ngIf="flow">\n        <app-form-builder [app]="app" [flow]="flow" [task]="task" (taskFieldValueChanged)="taskFieldValueChanged($event)"></app-form-builder>\n      </ng-container>\n    </div>\n  ',styleUrls:["styles/canvas.temporary.css"]}),__metadata("design:paramtypes",[canvas_service_1.CanvasService,router_1.ActivatedRoute])],TaskPropertiesComponent),exports.TaskPropertiesComponent=TaskPropertiesComponent;