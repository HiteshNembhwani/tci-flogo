"use strict";var __decorate=this&&this.__decorate||function(e,t,a,i){var s,r=arguments.length,n=r<3?t:null===i?i=Object.getOwnPropertyDescriptor(t,a):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)n=Reflect.decorate(e,t,a,i);else for(var c=e.length-1;c>=0;c--)(s=e[c])&&(n=(r<3?s(n):r>3?s(t,a,n):s(t,a))||n);return r>3&&n&&Object.defineProperty(t,a,n),n},__metadata=this&&this.__metadata||function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)};Object.defineProperty(exports,"__esModule",{value:!0});var router_1=require("@angular/router"),core_1=require("@angular/core"),constants_1=require("../../common/constants"),canvas_service_1=require("./canvas.service"),palette_service_1=require("./../shared/services/palette.service"),constants_2=require("../../common/constants"),lodash=require("lodash"),node_model_1=require("../../common/models/diagram/node.model"),TaskAdd=function(){function e(e,t,a){var i=this;this.service=e,this.paletteService=t,this.route=a,this.activityCatalogReady=!1,this.activityCatalog={},this.mainSectionName="General",this.route.params.subscribe(function(e){i.getActivities()})}return e.prototype.ngOnInit=function(){this.getActivities()},e.prototype.getActivities=function(){var e=this;this.activityCatalogReady||this.paletteService.getSchemasFromServer().subscribe(function(t){e.activityCatalog={},e.activityCatalog[e.mainSectionName]=[],e.buildSections(t),e.initializeServiceOverlay()})},e.prototype.buildSections=function(e){var t=this;lodash.forEach(e,function(e){if((!e.type||"flogo:activity"===e.type)&&JSON.parse(lodash.get(e,"display.visible",!0))){lodash.get(e,"display.category",null);e.display&&e.display.category&&"default"!==e.display.category&&e.display.category!==t.mainSectionName?(t.activityCatalog[e.display.category]||(t.activityCatalog[e.display.category]=[]),t.activityCatalog[e.display.category].push(e)):t.activityCatalog[t.mainSectionName].push(e)}})},e.prototype.initializeServiceOverlay=function(){this.selectService(this.services[0]),this.activityCatalogReady=!0},e.prototype.selectService=function(e){this.selectedService=e},Object.defineProperty(e.prototype,"services",{get:function(){return Object.keys(this.activityCatalog)},enumerable:!0,configurable:!0}),e.prototype.addTask=function(e){var t=lodash.cloneDeep(e),a=this.service.getAppModel(),i=this.service.getCurrentFlow(),s=this.service.getDiagramFlow(),r=t.isTrigger?constants_1.TASK_TYPE.TASK_ROOT:constants_1.TASK_TYPE.TASK,n=new node_model_1.FlowDiagramNode(lodash.cloneDeep(this.service.taskEventHelper.detail.node));n.type=constants_1.FLOW_DIAGRAM_NODE_TYPE.NODE;for(var c=!1,o=n,l=[];!c;){var d=this.getNodeParents(s,o);if(d.length>0)for(var v in d)c||d[v].type!==constants_1.FLOW_DIAGRAM_NODE_TYPE.NODE_ADD?c=!0:(l.push(d[v]),o=d[v]);else c=!0}for(var v in l.reverse())a.addNodeToFlow(i._id,l[v]);var p=a.addActivity(i._id,t,r,n,!0),y=lodash.assign({},i.items[p],{id:p});this.service._msg.emit(constants_2.APP_MESSAGING_VALUES.ADD_TASK,y)},e.prototype.getNodeParents=function(e,t){var a=[];for(var i in t.parents){e.nodes[t.parents[i]]&&a.push(e.nodes[t.parents[i]]);var s=e.nodesOfAddType;s[t.parents[i]]&&a.push(s[t.parents[i]])}return a},e.prototype.defaultTaskIcon=function(e){(e.srcElement||e.target).src="/wistudio/dist/assets/svg/flogo.flows.detail.diagram.activity.icon.svg"},e}();TaskAdd=__decorate([core_1.Component({selector:"task-add",moduleId:module.id,template:'\n            <div class="ta-container">\n              <div class="ta-title">\n                <div class="ta-title-text ta-no-edit pull-left">Add Activity</div>\n                <div class="ta-title-filter pull-left">\n                    <input #txtActivityName placeholder="Search activity..." type="search" class="form-control input-sm"/>\n                </div>\n                <div class="clearfix"></div>\n              </div>\n              <div class="form-container" *ngIf="activityCatalogReady">\n                <div class="ta-sidebar ta-task-menu">\n                  <div\n                    *ngFor="let service of services"\n                    (click)="selectService(service)"\n                    [ngClass]="{\'active\': selectedService === service }">\n                    {{service}}\n                  </div>\n                </div>\n                <div id="ta-types-top-container">\n                  <div class="ta-types-container" *ngIf="selectedService">\n                    <ng-container *ngFor="let task of activityCatalog[selectedService] | searchfilter: \'name\' : txtActivityName.value">\n                      <div class="ta-type" (click)="addTask(task, $event)">\n                        <img class="ta-type-ic" [taskIconProvider]="task" type="image/svg+xml" (error)="defaultTaskIcon($event);"/>\n                        <div class="ta-type-label">{{task.title}}</div>\n                      </div>\n                    </ng-container>\n                  </div>\n                </div>\n              </div>\n              <div class="loading-alert" *ngIf="!activityCatalogReady">\n                <div class="alert alert-info"><i class="fa fa-spinner fa-pulse fa-fw"></i> Loading activities...</div>\n              </div>\n            </div>',styleUrls:["styles/canvas.temporary.css"]}),__metadata("design:paramtypes",[canvas_service_1.CanvasService,palette_service_1.PaletteService,router_1.ActivatedRoute])],TaskAdd),exports.TaskAdd=TaskAdd;